<project xmlns:ivy="antlib:org.apache.ivy.ant">
  <property name="ivy.dep.file" value="${basedir}/ivy/ivy.xml" />
  <property name="ivy.settings.file" value="${basedir}/ivy/ivysettings.xml" />


  <!--
    primary targets:
      clean, prepare, compile, test, docs, package

    tests are only built & run if:
      - ivy.xml defines "e:testclass"
      - "skip.test" is not defined
    docs are only built if:
      - "skip.docs" is not defined
    build.properties is generated only if:
      - ivy.xml defines "e:buildpackage"
  -->


  <!-- CLEAN -->

  <target name="clean" description="erase built files and targets">
    <delete dir="target" />
    <delete dir="dist" />
  </target>

  <target name="clean-ivy" depends="prepare" description="erase ivy cache of downloaded packages">
    <ivy:cleancache />
  </target>


  <!-- PREPARE -->

  <target name="init">
    <mkdir dir="${target.dir}" />
    <mkdir dir="${test.target.dir}" />
    <mkdir dir="${dist.dir}" />

    <condition property="build.java">
      <available type="dir" file="${basedir}/src/main/java" />
    </condition>
    <condition property="build.gen-java">
      <available type="dir" file="${basedir}/src/main/gen-java" />
    </condition>
  </target>

  <target name="resolve" depends="install-ivy">
    <ivy:retrieve conf="bootstrap,default,test" pattern="${basedir}/target/libs/[conf]/[artifact]-[revision].[ext]" />
    <ivy:cachepath pathid="bootstrap.path" conf="bootstrap" />
    <ivy:cachepath pathid="deps.path" conf="default" />
    <ivy:cachepath pathid="test.path" conf="test" />
    <property name="dist.dir" value="${basedir}/dist/${ivy.module}-${ivy.revision}" />
    <property name="docs.target.dir" value="${dist.dir}/docs" />
  </target>

  <target name="prepare" depends="resolve,init" description="bootstrap ivy and scala, and download dependencies">
    <ivy:info file="${ivy.dep.file}" />
    <taskdef resource="scala/tools/ant/antlib.xml" classpathref="bootstrap.path" />
  </target>


  <!-- COMPILE -->

  <target name="find-source">
    <pathconvert property="build.java" setonempty="false">
      <fileset dir="${basedir}" includes="src/main/java/**/*.java" />
    </pathconvert>
    <pathconvert property="build.scala" setonempty="false">
      <fileset dir="${basedir}" includes="src/main/scala/**/*.scala" />
    </pathconvert>
  </target>

  <target name="compile-java" if="build.java">
    <javac srcdir="${basedir}/src/main/java" destdir="${target.dir}" deprecation="on">
      <classpath>
        <path refid="deps.path" />
      </classpath>
      <include name="**/*.java" />
    </javac>
  </target>

  <target name="compile-scala" if="build.scala">
    <scalac srcdir="${source.dir}" destdir="${target.dir}" force="changed" deprecation="on">
      <classpath>
        <path refid="deps.path" />
      </classpath>
      <include name="**/*.scala" />
    </scalac>
  </target>

  <target name="write-build-info" if="ivy.extra.buildpackage">
    <tstamp>
      <format property="build.timestamp" pattern="yyyyMMdd-HHmmss" />
    </tstamp>
    <pathconvert property="build.properties.path">
      <path location="${ivy.extra.buildpackage}" />
      <unpackagemapper from="${basedir}/*" to="${target.dir}/*" />
    </pathconvert>
    <propertyfile file="${build.properties.path}/build.properties">
      <entry key="name" value="${ivy.module}" />
      <entry key="version" value="${ivy.revision}" />
      <entry key="build_name" value="${build.timestamp}" />
    </propertyfile>
  </target>

  <target name="compile" depends="prepare, find-source, compile-java,
    compile-scala, write-build-info" description="compile java and scala code" />


  <!-- TEST -->

  <target name="compile-tests" depends="prepare,compile" if="ivy.extra.testclass">
    <scalac srcdir="${test.source.dir}" destdir="${test.target.dir}" force="changed" deprecation="on">
      <classpath>
        <path refid="test.path" />
        <pathelement location="${target.dir}" />
      </classpath>
      <include name="**/*.scala" />
    </scalac>
  </target>

  <target name="run-tests" if="ivy.extra.testclass">
    <java classname="scala.tools.nsc.MainGenericRunner" fork="true" failonerror="true">
      <classpath>
        <path refid="test.path" />
        <pathelement location="${target.dir}" />
        <pathelement location="${test.target.dir}" />
      </classpath>
      <arg line="${ivy.extra.testclass}" />
    </java>
  </target>

  <target name="test" unless="skip.test" depends="compile-tests,run-tests" description="compile and run tests" />


  <!-- DOCS -->

  <target name="vscaladoc" depends="prepare">
    <delete dir="${docs.target.dir}/scaladoc" />
    <mkdir dir="${docs.target.dir}/scaladoc" />
    <pathconvert property="doc.sources" pathsep=" ">
      <fileset dir="${source.dir}" includes="**/*.scala" />
    </pathconvert>
    <echo message="Building vscaladoc..." />
    <java classname="org.scala_tools.vscaladoc.Main" fork="true" failonerror="true">
      <classpath>
        <path refid="bootstrap.path" />
      </classpath>
      <arg value="-classpath" />
      <arg pathref="bootstrap.path" />
      <arg value="-d" />
      <arg value="${docs.target.dir}/scaladoc" />
      <arg value="-sourcepath" />
      <arg value="${source.dir}" />
      <arg value="-windowtitle" />
      <arg value="${ivy.module} ${ivy.revision}" />
      <arg value="-doctitle" />
      <arg value="${ivy.module} ${ivy.revision}" />
      <arg value="-linksource" />
      <arg line="${doc.sources}" />
    </java>
  </target>

  <target name="docs" depends="prepare,vscaladoc" unless="skip.docs"  description="build source documentation" />


  <!-- INSTALL -->

  <target name="copy-deps-into-dist">
    <copy todir="${dist.dir}/libs" flatten="true">
      <path refid="deps.path" />
    </copy>
    <pathconvert refid="deps.path" pathsep=" " property="deps.path.jar-format">
      <chainedmapper>
        <flattenmapper />
        <globmapper from="*" to="libs/*" />
      </chainedmapper>
    </pathconvert>
  </target>

  <target name="copy-extra-dist" if="dist.extra">
    <copy todir="${dist.dir}">
      <path refid="dist.extra" />
    </copy>
  </target>

  <target name="copy-into-dist" depends="copy-deps-into-dist,copy-extra-dist" />

  <target name="make-non-executable-jar" unless="ivy.extra.jarclassname">
    <jar destfile="${dist.dir}/${ivy.module}-${ivy.revision}.jar">
      <fileset dir="${target.dir}" />
    </jar>
  </target>

  <!-- generate a jar that contains all deps inside it, so it can be run with "java -jar" -->
  <target name="make-executable-jar" if="ivy.extra.jarclassname" depends="copy-into-dist">
    <jar destfile="${dist.dir}/${ivy.module}-${ivy.revision}.jar">
      <fileset dir="${target.dir}" />
      <manifest>
        <attribute name="Main-Class" value="${ivy.extra.jarclassname}" />
        <attribute name="Class-Path" value="${deps.path.jar-format}" />
      </manifest>
    </jar>
  </target>

  <target name="package" depends="test,make-non-executable-jar,make-executable-jar,docs" description="build complete jar(s) and docs">
    <ivy:makepom ivyfile="${basedir}/ivy/ivy.xml" pomfile="${dist.dir}/${ivy.module}-${ivy.revision}.pom" />
    <ivy:deliver conf="*(public)" />
  </target>


  <!-- RELEASE -->

  <target name="release" depends="package">
    <ivy:publish resolver="push" overwrite="true">
      <artifacts pattern="${dist.dir}/[artifact]-[revision].[ext]" />
    </ivy:publish>
    <copy file="INSTALL" todir="${dist.dir}" failonerror="false" />
    <copy file="LICENSE" todir="${dist.dir}" failonerror="false" />
    <copy file="README" todir="${dist.dir}" failonerror="false" />
    <copy file="build.xml" todir="${dist.dir}" />
    <copy todir="${dist.dir}/src">
      <fileset dir="src" />
    </copy>
    <copy todir="${dist.dir}/ivy">
      <fileset dir="ivy" />
    </copy>
    <zip destfile="${basedir}/dist/${ivy.module}-${ivy.revision}.zip"
      basedir="${basedir}/dist"
      includes="${ivy.module}-${ivy.revision}/**"
      excludes="${ivy.module}-${ivy.revision}/libs/**" />
  </target>

</project>
